 ---- О проделанной работе ----

      ### Краткое резюме. 

Выполнены все путкты ТЗ: 
- список задач отрисовывается, данные с сервера динамически подставляются в список;
- создается новая заявка;
- добавлен раздельный скролл;
- реализована возможность добавления комментариев, выбора исполнителя и статуса, все данные сразу сохраняются и обновляются;
- при старте приложения подгружаются необходимые справочники;
- реализована маршрутизация для иконок левого меню.
 
Общее впечатление: было не совсем привычно работать с макетом в Photoshop, чаще встречалась Figma, а также некоторое время заняло погружение в API (что где отрисовывать и куда отправлять), в остальном особо ничего не приходит что можно было бы отметить. 

      ### Более детально.

1. Работа над проектом.

1.1. Ветвление и коммиты. 

Вёл разработку в отдельных ветках. В одной - верстал, во второй - настраивал маршрутизацию и подключил к api. Старался делать коммиты с понятным содержанием (feature, fix, style). Знаю, что в некоторых компаниях есть строгие правила именования, т.к. коммиты интегрированы с такс-трекингом и автоматизированы, поэтому демонстрирую готовность придерживаться этих правил. 

1.2. Архитектура.

Не стал пытаться изображать какие-либо архитектурные паттерны (FSD и прочие), но старался разбивать код на логические блоки с понятным именование: страницы/компоненты/маршрутизацию/типы.

1.3. Стайлгайд.

Старался избегать магических значений, обработчики выносить в отдельные функции, функции именовать с глаголами и т.д. 

2. Работа с API.

Выбрал RTK Query, который достаточно лаконично в одном слайсе (который в принципе можно было разбить) выполнил все необходимые функции. Немного пришлось только повозиться с тегами, поскольку кэширование играло злую шутку. 

TenantGuid вынес в .env переменную и использую в слайсе. 

Я заметил, что сервер возвращает комментарии, содержащие HTML разметку, поэтому я задал уточняющий вопрос менеджеру, но видимо в силу большой загруженности ответа не получил, поэтому на свое усмотрение использовал dangerouslySetInnerHTML не экранируя данные, учитывая, что это тестовый проект. Иначе Реакт отрисовывает данные "как есть" вместе с тегами и прочим. 

3. Маршрутизация. 

Каждая иконка в меню слева имеет свой отдельный маршрут, что позволяет масштабировать приложение. Также предусмотрена ситуация, когда пользователь вводит несуществующий маршрут. При старте приложения пользователь редиректится сразу на заявки. 

4. Прочее. 

Я позволил себе своровать иконку IntraVision, надеюсь вы не будете сильно ругаться.

5. Точки роста. 

Можно было бы немного отрефакторить код, поделить крупные компоненты на более мелкие, привести именование классов в порядок, в маршрутизации завести универсальную переменную и использовать её, вместо хардкодного navigate('/'), разделить слайс на два - допустим всё что связано с задачами (список, создание и тд) и со стилями (статусы, цвета приоритетов) 


Благодарю за внимание! 

